I"ô<h2 id="sliding-window-pattern-in-dsa-questions">Sliding Window pattern in DSA questions</h2>

<h3 id="1-maximum-sum-subarray-of-size-k-easy">1. Maximum Sum Subarray of Size K (easy)</h3>

<details>
<summary>Questions Details</summary>

<p>Given an array of positive numbers and a positive number â€˜kâ€™, find the maximum sum of any contiguous subarray of size â€˜kâ€™.</p>

&lt;/br&gt;
<b>Example 1:</b>
&lt;/br&gt;
Input: [2, 1, 5, 1, 3, 2], k=3 
&lt;/br&gt;
Output: 9

Explanation: Subarray with maximum sum is [5, 1, 3].

* Example 2:

Input: [2, 3, 4, 1, 5], k=2 

Output: 7

Explanation: Subarray with maximum sum is [3, 4].

</details>

<details>
  <summary>Implementation</summary>

<ul class="tab" data-tab="631b2603-d136-4c65-8390-1749b0caa35e" data-name="log">
  
      <li class="active">
          <a href="#">Python </a>
      </li>
  
      <li>
          <a href="#">js </a>
      </li>
  
      <li>
          <a href="#">ruby </a>
      </li>
  
</ul>
<ul class="tab-content" id="631b2603-d136-4c65-8390-1749b0caa35e" data-name="log">
  
      <li class="active">
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td> --><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">max_sub_array_of_size_k</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">arr</span><span class="p">):</span>
  <span class="n">max_sum</span> <span class="p">,</span> <span class="n">window_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
  <span class="n">window_start</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">for</span> <span class="n">window_end</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
    <span class="n">window_sum</span> <span class="o">+=</span> <span class="n">arr</span><span class="p">[</span><span class="n">window_end</span><span class="p">]</span>  <span class="c1"># add the next element
</span>    <span class="c1"># slide the window, we don't need to slide if we've not hit 
</span>    <span class="n">the</span> <span class="n">required</span> <span class="n">window</span> <span class="n">size</span> <span class="n">of</span> <span class="s">'k'</span>
    <span class="k">if</span> <span class="n">window_end</span> <span class="o">&gt;=</span> <span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
      <span class="n">max_sum</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_sum</span><span class="p">,</span> <span class="n">window_sum</span><span class="p">)</span>
      <span class="n">window_sum</span> <span class="o">-=</span> <span class="n">arr</span><span class="p">[</span><span class="n">window_start</span><span class="p">]</span>  <span class="c1"># subtract the element going out
</span>      <span class="n">window_start</span> <span class="o">+=</span> <span class="mi">1</span>  <span class="c1"># slide the window ahead
</span>  <span class="k">return</span> <span class="n">max_sum</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"Maximum sum of a subarray of size K: "</span> <span class="o">+</span> 
  <span class="nb">str</span><span class="p">(</span><span class="n">max_sub_array_of_size_k</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">])))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"Maximum sum of a subarray of size K: "</span> <span class="o">+</span> 
  <span class="nb">str</span><span class="p">(</span><span class="n">max_sub_array_of_size_k</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">])))</span>

<span class="n">main</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
</li>
  
      <li>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
</li>
  
      <li>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="n">pputs</span> <span class="s1">'hello'</span>
</pre></td></tr></tbody></table></code></pre></div></div>
</li>
  
</ul>


</details>

<h1 id="a-collapsible-section-with-markdown">A collapsible section with markdown</h1>
<details>
  <summary>Click to expand!</summary>
  
  ## Heading
  1. A numbered
  2. list
     * With some
     * Sub bullets
</details>

<emu-alg>
  <ol>
    <li>Assert: Type(<var>iterator</var>) is Object.</li>
    <li>Assert: <var>completion</var> is a Completion Record.</li>
    <li>Let <var>hasReturn</var> be HasProperty(<var>iterator</var>, <code>"return"</code>).</li>
    <li>ReturnIfAbrupt(<var>hasReturn</var>).
      <ol>
        <li>If <var>hasReturn</var> is <emu-val>true</emu-val>, then
          <ol>
            <li>Let <var>innerResult</var> be Invoke(<var>iterator</var>, <code>"return"</code>, ( )).</li>
            <li>If <var>completion</var>.[[type]] is not <emu-const>throw</emu-const> and <var>innerResult</var>.[[type]] is <emu-const>throw</emu-const>, then
              <ol>
                <li>Return <var>innerResult</var>.</li>
              </ol>
            </li>
          </ol>
        </li>
      </ol>
    </li>
    <li>Return <var>completion</var>.</li>
  </ol>
</emu-alg>
:ET